package br.com.deschateie.bo;

import br.com.deschateie.beans.Endereco;
import br.com.deschateie.dao.EnderecoDAO;

public class EnderecoBO {
	
	
	public static String novoEnderecoPsicologo(Endereco endereco)throws Exception {
		
		
		//padronizacao
		endereco.setAll(endereco.getCdEndereco(),
						endereco.getCdAtendente(),
						endereco.getTipo().toUpperCase(),
						endereco.getLogradouro().toUpperCase(),
						endereco.getNumero(),
						endereco.getComplemento().toUpperCase(),
						endereco.getCep(),
						endereco.getBairro().toUpperCase(),
						endereco.getCidade().toUpperCase(),
						endereco.getUf().toUpperCase().trim().substring(0, 1),
						endereco.getPais().toUpperCase()
						);
		
		if(endereco.getTipo().length()>20) {
			return "Quantidade de caracterdes de  Tipo muito grande";
		}
		
		if (endereco.getLogradouro().length()>60) {
			return "Quantidade de caracterdes de  Logradouro muito grande";
		}
		
		if(endereco.getNumero().length()>20) {
			return "Número muito grande";
		}
		
		if (endereco.getComplemento().length()>10) {
			return "Quantidade de caracterdes de  Complemento muito grande";
		}
		
		if (endereco.getCep().length()>99999999) {
			return "Número de CEP muito grande";
		}
		
		if (endereco.getBairro().length()>30) {
			return "Quantidade de caracterdes de Bairro muito grande";
		}
		
		if (endereco.getCidade().length()>30) {
			return "Quantidade de caracterdes de Cidade muito grande";
			
		}
		
		if (endereco.getUf().length()>2) {
			return "Quantidade de caracterdes de  UF muito grande";
			
		}
		
		if (endereco.getCdAtendente()>99999) {
			return "Código do Atendente inválido, excede a quantidade de caracteres permitida";
		}
		
		if (endereco.getCdAtendente()<1) {
			return "Atendente não existe";
		}
		
		if(endereco.getCdEndereco()<1) {
			return "código inválido";
		}
		
		if(endereco.getCdEndereco()>99999) {
			return "Código do endereco inválido, excede a quantidade de caracteres permitida";
		}
		
		
		if(endereco.getTipo().equals(null)) {
			return "O campo tipo não pode estar vazio";
		}
		
		if (endereco.getLogradouro().equals(null)) {
			return "O campo logradouro não pode estar vazio";
		}
		
		if(endereco.getNumero().equals(null)) {
			return "O campo numero não pode estar vazio";
		}
		
		
		
		if (endereco.getCep().length()== 0) {
			return "O campo Cep não pode estar vazio ";
		}
		
		if (endereco.getBairro().equals(null)) {
			return "O campo bairro não pode estar vazio";
		}
		
		if (endereco.getCidade().equals(null)) {
			return "O campo cidade não pode estar vazio";
			
		}
		
		if (endereco.getUf().equals(null)) {
			return "O campo uf não pode estar vazio";
		}	
		
		

		EnderecoDAO dao = new EnderecoDAO();
		Endereco ende = dao.consultarEnderecoPsicologo(endereco.getCdEndereco());
		String msg = null;
		if(ende.getCdEndereco()==0) {
			msg = dao.gravarEnderecoPsicologo(endereco);
			dao.fechar();
			return msg;
		}
		dao.fechar();
		return "Endereco Já existente";
	}

	public static String novoEnderecoVoluntario(Endereco endereco)throws Exception {

		
		
		//padronizacao
		endereco.setAll(endereco.getCdEndereco(),
						endereco.getCdAtendente(),
						endereco.getTipo().toUpperCase(),
						endereco.getLogradouro().toUpperCase(),
						endereco.getNumero(),
						endereco.getComplemento().toUpperCase(),
						endereco.getCep(),
						endereco.getBairro().toUpperCase(),
						endereco.getCidade().toUpperCase(),
						endereco.getUf().toUpperCase().trim().substring(0, 1),
						endereco.getPais().toUpperCase()
						);
		
		if(endereco.getCdEndereco()<1) {
			return "código inválido";
		}
		
		if(endereco.getCdEndereco()>99999) {
			return "Código do endereco inválido, excede a quantidade de caracteres permitida";
		}
		
		if(endereco.getTipo().length()>20) {
			return "Quantidade de caracterdes de  Tipo muito grande";
		}
		
		if (endereco.getLogradouro().length()>60) {
			return "Quantidade de caracterdes de  Logradouro muito grande";
		}
		
		if(endereco.getNumero().length()>20) {
			return "Número muito grande";
		}
		
		if (endereco.getComplemento().length()>10) {
			return "Quantidade de caracterdes de  Complemento muito grande";
		}
		
		if (endereco.getCep().length()>99999999) {
			return "Número de CEP muito grande";
		}
		
		if (endereco.getBairro().length()>30) {
			return "Quantidade de caracterdes de Bairro muito grande";
		}
		
		if (endereco.getCidade().length()>30) {
			return "Quantidade de caracterdes de Cidade muito grande";
			
		}
		
		if (endereco.getUf().length()>2) {
			return "Quantidade de caracterdes de  UF muito grande";
			
		}
		
		if (endereco.getCdAtendente()>99999) {
			return "Código do Atendente inválido";
		}
		
		if (endereco.getCdAtendente()<1) {
			return "Atendente não existe";
		}
		
		
		if(endereco.getTipo().equals(null)) {
			return "O campo tipo não pode estar vazio";
		}
		
		if (endereco.getLogradouro().equals(null)) {
			return "O campo logradouro não pode estar vazio";
		}
		
		if(endereco.getNumero().equals(null)) {
			return "O campo numero não pode estar vazio";
		}
		
		
		
		if (endereco.getCep().length()== 0) {
			return "O campo Cep não pode estar vazio não pode estar vazio";
		}
		
		if (endereco.getBairro().equals(null)) {
			return "O campo bairro não pode estar vazio";
		}
		
		if (endereco.getCidade().equals(null)) {
			return "O campo cidade não pode estar vazio";
			
		}
		
		if (endereco.getUf().equals(null)) {
			return "O campo uf não pode estar vazio";
		}	
		
		

		EnderecoDAO dao = new EnderecoDAO();
		Endereco ende = dao.consultarEnderecoVoluntario(endereco.getCdEndereco());
		String msg = null;
		if(ende.getCdEndereco()==0) {
			msg = dao.gravarEnderecoVoluntario(endereco);
			dao.fechar();
			return msg;
		}
		dao.fechar();
		return "Endereco Já existente";
	}

	
	public static String pesquisarEnderecoPsicologo(String logradouro)throws Exception{
		Endereco endereco = new Endereco();
		
		
		
		
		EnderecoDAO dao = new EnderecoDAO();
		
		
		
		
		endereco = dao.consultarEnderecoPsicologo(cdEndereco);
		
		if(endereco.getCdAtendente()==0) {
			dao.fechar();
			return "Não foi possivel encontrar nenhum endereco usando o cep " + cdEndereco;
		}
		dao.fechar();
		return "Endereco Encontrado" + endereco.getAll();
		
	
	}

	public static String pesquisarEnderecoVoluntario(int cdEndereco)throws Exception{

		if(cdEndereco < 1) {
			return "código endereco inválido";
		}
		if(cdEndereco >99999999) {
			return "Quantidade de caracterdes do endereço muito grande";
		}
		
		Endereco endereco = new Endereco();		
		EnderecoDAO dao = new EnderecoDAO();
		
		
		
		
		endereco = dao.consultarEnderecoVoluntario(cdEndereco);
		
		if(endereco.getCdAtendente()==0) {
			dao.fechar();
			return "Não foi possivel encontrar nenhum endereco usando o código :" + cdEndereco;
		}
		dao.fechar();
		return "Endereco Encontrado" + endereco.getAll();
		
	
	}

	
	public static String excluirEnderecoPsicologo(int cdEndereco)throws Exception{
		if(cdEndereco < 0) {
			return "codigo endereco inválido";
		}
		
		if(cdEndereco > 99999999) {
			return "quantidade de caracteres ultrapassa o permitido ";
		}
		
		EnderecoDAO dao = new EnderecoDAO();
		Endereco endereco = dao.consultarEnderecoPsicologo(cdEndereco);
		
		if(endereco.getCdEndereco()==0) {
			dao.fechar();
			return "não foi possivel localizar um endereco com esse cep para ser apagado";
		}
		
		dao.apagarEndereco(cdEndereco);
		dao.fechar(); 
		return "O endereco foi apagado com sucesso" ;
	}

	

	public static String excluirEnderecoVoluntario(int cdEndereco)throws Exception{
		if(cdEndereco < 0) {
			return "código endereco inválido";
		}
		
		if(cdEndereco > 999999) {
			return "quantidade de caracteres ultrapassa o permitido ";
		}
		
		EnderecoDAO dao = new EnderecoDAO();
		Endereco endereco = dao.consultarEnderecoVoluntario(cdEndereco);
		
		if(endereco.getCdEndereco() == 0) {
			dao.fechar();
			return "não foi possivel localizar um endereco com esse cep para ser apagado";
		}
		
		dao.apagarEndereco(cdEndereco);
		dao.fechar(); 
		return "O endereco foi apagado com sucesso" ;
	}

	public static String alterarDadosEnderecoPsicologo(Endereco endereco)throws Exception{
		
		if(endereco.getCdEndereco()<1) {
			return "código inválido";
		}
		
		if(endereco.getCdEndereco()>99999) {
			return "Código do endereco inválido, excede a quantidade de caracteres permitida";
		}
		if(endereco.getTipo().length()>20) {
			return "Quantidade de caracterdes de  Tipo muito grande";
		}
		
		if (endereco.getLogradouro().length()>60) {
			return "Quantidade de caracterdes de  Logradouro muito grande";
		}
		
		if(endereco.getNumero().length()>20) {
			return "Número muito grande";
		}
		
		if (endereco.getComplemento().length()>10) {
			return "Quantidade de caracterdes de  Complemento muito grande";
		}
		
		if (endereco.getCep().length()>99999999) {
			return "Número de CEP muito grande";
		}
		
		if (endereco.getBairro().length()>30) {
			return "Quantidade de caracterdes de Bairro muito grande";
		}
		
		if (endereco.getCidade().length()>30) {
			return "Quantidade de caracterdes de Cidade muito grande";
			
		}
		
		if (endereco.getUf().length()>2) {
			return "Quantidade de caracterdes de  UF muito grande";
			
		}
		
		if (endereco.getCdAtendente()>99999) {
			return "Código do Atendente inválido";
		}
		
		if (endereco.getCdAtendente()<1) {
			return "Atendente não existe";
		}
		
		
		if(endereco.getTipo().equals(null)) {
			return "O campo tipo não pode estar vazio";
		}
		
		if (endereco.getLogradouro().equals(null)) {
			return "O campo logradouro não pode estar vazio";
		}
		
		if(endereco.getNumero().equals(null)) {
			return "O campo numero não pode estar vazio";
		}
		
		
		
		if (endereco.getCep().length()== 0) {
			return "O campo Cep não pode estar vazio não pode estar vazio";
		}
		
		if (endereco.getBairro().equals(null)) {
			return "O campo bairro não pode estar vazio";
		}
		
		if (endereco.getCidade().equals(null)) {
			return "O campo cidade não pode estar vazio";
			
		}
		
		if (endereco.getUf().equals(null)) {
			return "O campo uf não pode estar vazio";
		}
		
		EnderecoDAO dao = new EnderecoDAO();
		Endereco ende = new Endereco();
		
		ende = dao.consultarEnderecoPsicologo(endereco.getCdEndereco());
		
		if(ende.getCdEndereco() != 0) {
			
			endereco.setAll(endereco.getCdEndereco(),
					endereco.getCdAtendente(),
					endereco.getTipo().toUpperCase(),
					endereco.getLogradouro().toUpperCase(),
					endereco.getNumero(),
					endereco.getComplemento().toUpperCase(),
					endereco.getCep(),
					endereco.getBairro().toUpperCase(),
					endereco.getCidade().toUpperCase(),
					endereco.getUf().toUpperCase().trim().substring(0, 1),
					endereco.getPais().toUpperCase()
					);
			
			String resp = dao.alterarEnderecoPsicologo(endereco);

			

			dao.fechar();
			return resp;
		}
		
		
		
		dao.fechar();
		return "código de endereco não encontrado";
		
		
		
		
		
	}
	
	
	public static String alterarDadosEnderecoVoluntario(Endereco endereco)throws Exception{
		
		
		if(endereco.getCdEndereco()<1) {
			return "código inválido";
		}
		
		if(endereco.getCdEndereco()>99999) {
			return "Código do endereco inválido, excede a quantidade de caracteres permitida";
		}
		
		if(endereco.getTipo().length()>20) {
			return "Quantidade de caracterdes de  Tipo muito grande";
		}
		
		if (endereco.getLogradouro().length()>60) {
			return "Quantidade de caracterdes de  Logradouro muito grande";
		}
		
		if(endereco.getNumero().length()>20) {
			return "Número muito grande";
		}
		
		if (endereco.getComplemento().length()>10) {
			return "Quantidade de caracterdes de  Complemento muito grande";
		}
		
		if (endereco.getCep().length()>99999999) {
			return "Número de CEP muito grande";
		}
		
		if (endereco.getBairro().length()>30) {
			return "Quantidade de caracterdes de Bairro muito grande";
		}
		
		if (endereco.getCidade().length()>30) {
			return "Quantidade de caracterdes de Cidade muito grande";
			
		}
		
		if (endereco.getUf().length()>2) {
			return "Quantidade de caracterdes de  UF muito grande";
			
		}
		
		if (endereco.getCdAtendente()>99999) {
			return "Código do Atendente inválido";
		}
		
		if (endereco.getCdAtendente()<1) {
			return "Atendente não existe";
		}
		
		
		if(endereco.getTipo().equals(null)) {
			return "O campo tipo não pode estar vazio";
		}
		
		if (endereco.getLogradouro().equals(null)) {
			return "O campo logradouro não pode estar vazio";
		}
		
		if(endereco.getNumero().equals(null)) {
			return "O campo numero não pode estar vazio";
		}
		
		
		
		if (endereco.getCep().length()== 0) {
			return "O campo Cep não pode estar vazio não pode estar vazio";
		}
		
		if (endereco.getBairro().equals(null)) {
			return "O campo bairro não pode estar vazio";
		}
		
		if (endereco.getCidade().equals(null)) {
			return "O campo cidade não pode estar vazio";
			
		}
		
		if (endereco.getUf().equals(null)) {
			return "O campo uf não pode estar vazio";
		}

		EnderecoDAO dao = new EnderecoDAO();
		Endereco ende = new Endereco();
		
		ende = dao.consultarEnderecoVoluntario(endereco.getCdEndereco());
		
		if(ende.getCdEndereco() != 0) {
			
			endereco.setAll(endereco.getCdEndereco(),
					endereco.getCdAtendente(),
					endereco.getTipo().toUpperCase(),
					endereco.getLogradouro().toUpperCase(),
					endereco.getNumero(),
					endereco.getComplemento().toUpperCase(),
					endereco.getCep(),
					endereco.getBairro().toUpperCase(),
					endereco.getCidade().toUpperCase(),
					endereco.getUf().toUpperCase().trim().substring(0, 1),
					endereco.getPais().toUpperCase()
					);
			
			String resp = dao.alterarEnderecoVoluntario(endereco);

			

			dao.fechar();
			return resp;
		}
		
		
		
		dao.fechar();
		return "código de endereco não encontrado";
		
		
		
	}
	
	
}
